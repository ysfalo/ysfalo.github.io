<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bin Xu&#39; s blog</title>
  <subtitle>Life means struggle.</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-30T06:47:13.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bin Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一起学TensorFlow</title>
    <link href="http://yoursite.com/2017/06/30/%E4%B8%80%E8%B5%B7%E5%AD%A6TensorFlow/"/>
    <id>http://yoursite.com/2017/06/30/一起学TensorFlow/</id>
    <published>2017-06-30T06:05:14.000Z</published>
    <updated>2017-06-30T06:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="记录一些学习TensorFlow过程中遇到的一些问题，做一名合格的TFBoy！"><em>记录一些学习TensorFlow过程中遇到的一些问题，做一名合格的TFBoy！</em></h1><h2 id="1-选择指定GPU"><em>1.选择指定GPU</em></h2><p>如果电脑有多个GPU，如果想只使用部分GPU，可以设置CUDA_VISIBLE_DEVICES。在调用python程序时，可以使用<br><a id="more"></a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=<span class="number">1</span> python my_script.py</span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># ----------------------- details ---------------------</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line">Environment Variable Syntax      Results</span><br><span class="line">CUDA_VISIBLE_DEVICES=<span class="number">1</span>           Only device <span class="number">1</span> will be seen</span><br><span class="line">CUDA_VISIBLE_DEVICES=<span class="number">0</span>,<span class="number">1</span>         Devices <span class="number">0</span> and <span class="number">1</span> will be visible</span><br><span class="line">CUDA_VISIBLE_DEVICES=<span class="string">"0,1"</span>       Same as above, quotation marks are optional</span><br><span class="line">CUDA_VISIBLE_DEVICES=<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>       Devices <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span> will be visible; device <span class="number">1</span> is masked</span><br><span class="line">CUDA_VISIBLE_DEVICES=<span class="string">""</span>          No GPU will be visible</span><br></pre></td></tr></table></figure>
<p>如果要在python代码中设置使用的GPU，可以在程序中使用下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = <span class="string">"2"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-可视化_feature_map"><em>2.可视化 feature map</em></h2><p>在训练过程中可以借助于Tensorboard对feature map进行可视化。默认的tensorboard支持的image的summary对通道数有限制，必须是1、3或者4。对于多通道的feature map，一个可行的办法便是将多个通道展开，然后拼成一副很大的单通道的image，然后写进summary中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># conv_feature 是需要可视化的张量, shape=(batch_size, height, width, channels), 假设我们例子里channels=64</span></span><br><span class="line">vis_conv_feature = tf.slice(conv_feature, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>)) <span class="comment"># 取出batch里面的第一个sample</span></span><br><span class="line">vis_conv_feature = tf.reshape(vis_conv_feature, (height, width, channels))</span><br><span class="line">vis_conv_feature = tf.image.resize_image_with_crop_or_pad(vis_conv_feature, height+<span class="number">4</span>, widht+<span class="number">4</span>) <span class="comment"># 4这里用来隔开拼接的每个通道的图，也可以设为其它的值</span></span><br><span class="line">vis_conv_feature = tf.reshape(vis_conv_feature, (height+<span class="number">4</span>, widht+<span class="number">4</span>, <span class="number">8</span>, <span class="number">8</span>)) <span class="comment"># 64=8x8,就是64通道图展开为8x8的一个通道的图</span></span><br><span class="line">vis_conv_feature = tf.transpose(vis_conv_feature, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">vis_conv_feature = tf.reshape(vis_conv_feature, (<span class="number">1</span>, (height+<span class="number">4</span>)*<span class="number">8</span>, (widht+<span class="number">4</span>)*<span class="number">8</span>, <span class="number">1</span> ))</span><br><span class="line">tf.summary.image(<span class="string">'vis_conv_feature'</span>, vis_conv_feature)</span><br></pre></td></tr></table></figure></p>
<p>具体实现可以稍作修改，或者写成一个函数来调用，感觉Google官方应该提供一下feature可视化的API<br><br>实现参考 <a href="http://stackoverflow.com/questions/33802336/visualizing-output-of-convolutional-layer-in-tensorflow" target="_blank" rel="external">http://stackoverflow.com/questions/33802336/visualizing-output-of-convolutional-layer-in-tensorflow</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;记录一些学习TensorFlow过程中遇到的一些问题，做一名合格的TFBoy！&quot;&gt;&lt;em&gt;记录一些学习TensorFlow过程中遇到的一些问题，做一名合格的TFBoy！&lt;/em&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-选择指定GPU&quot;&gt;&lt;em&gt;1.选择指定GPU&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;如果电脑有多个GPU，如果想只使用部分GPU，可以设置CUDA_VISIBLE_DEVICES。在调用python程序时，可以使用&lt;br&gt;
    
    </summary>
    
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib绘制柱状图</title>
    <link href="http://yoursite.com/2017/02/24/Matplotlib%E7%BB%98%E5%88%B6%E6%9F%B1%E7%8A%B6%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/02/24/Matplotlib绘制柱状图/</id>
    <published>2017-02-24T08:07:05.000Z</published>
    <updated>2017-06-28T04:21:30.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="一、模拟数据生成"><em>一、模拟数据生成</em></h1><p>主要目的是将之前生成的测试数据（保存为txt文件）中的数据读取出来，包括groundtruth以及预测数据。<br>文件内容格式如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.9876</span>, <span class="number">0.9623</span></span><br><span class="line"><span class="number">0.9645</span>, <span class="number">0.9342</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>简单起见，直接用Python代码随机生成一下文本数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_text</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Generate Text."""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> res:</span><br><span class="line">        gt_label = []</span><br><span class="line">        pred_label = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            res.writelines(<span class="string">'&#123;&#125;, &#123;&#125;\n'</span>.format(random.random(), random.random()))</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="二、读取文本数据并用matplotlib绘制柱状图"><em>二、读取文本数据并用matplotlib绘制柱状图</em></h1><h2 id="A-_单张柱状图"><em>A. 单张柱状图</em></h2><p>读取一个txt文件，生成一幅柱状图，代码参考<a href="http://www.jianshu.com/p/8c0fe1240e78," title="参考链接" target="_blank" rel="external">网上的一篇博客</a>，主要代码如下：<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Draw bar."""</span></span><br><span class="line"></span><br><span class="line">    gt_label = []</span><br><span class="line">    pred_label = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> res:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line">            data = line.split(<span class="string">','</span>)</span><br><span class="line">            gt_label.append(float(data[<span class="number">0</span>]))</span><br><span class="line">            pred_label.append(float(data[<span class="number">1</span>]))</span><br><span class="line">    x_axis = range(<span class="number">1</span>, len(gt_label) + <span class="number">1</span>)</span><br><span class="line">    plt.bar(x_axis, gt_label, width=<span class="number">0.35</span>,</span><br><span class="line">            facecolor=<span class="string">'lightskyblue'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">    plt.bar([i + <span class="number">0.35</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_axis], pred_label, width=<span class="number">0.35</span>,</span><br><span class="line">            facecolor=<span class="string">'yellowgreen'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">    ax = plt.gca()</span><br><span class="line">    ax.set_ylabel(<span class="string">'Index'</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">'Sample images'</span>)</span><br><span class="line">    ax.set_xticks(x_axis)</span><br><span class="line">    x_labels = [<span class="string">'image_&#123;&#125;'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> x_axis]</span><br><span class="line">    ax.set_xticklabels(x_labels, rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tick <span class="keyword">in</span> ax.xaxis.get_major_ticks():</span><br><span class="line">        tick.label1.set_fontsize(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    titleStr = <span class="string">'Example Bar'</span></span><br><span class="line">    plt.title(titleStr)</span><br><span class="line">    plt.legend([<span class="string">'gt_label'</span>, <span class="string">'pred_label'</span>], loc=<span class="string">'upper right'</span>)</span><br><span class="line">    <span class="comment"># plt.savefig('test.png')</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></p>
<p>最后生成的柱状图如下<br></p>
<p><img src="/images/test1.png" alt=""></p>
<h2 id="B-_多张柱状图"><em>B. 多张柱状图</em></h2><p>类似单张，主要代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_sub</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Draw bar."""</span></span><br><span class="line"></span><br><span class="line">    gen_text() <span class="comment"># 重新生成模拟数据</span></span><br><span class="line">    gt_label = []</span><br><span class="line">    pred_label = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> res:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line">            data = line.split(<span class="string">','</span>)</span><br><span class="line">            gt_label.append(float(data[<span class="number">0</span>]))</span><br><span class="line">            pred_label.append(float(data[<span class="number">1</span>]))</span><br><span class="line">    x_axis = range(<span class="number">1</span>, len(gt_label) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">    ax1 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    ax1.set_title(<span class="string">'Bar 1'</span>, fontsize=<span class="number">7</span>)</span><br><span class="line">    ax1.bar(x_axis, gt_label, width=<span class="number">0.35</span>,</span><br><span class="line">            facecolor=<span class="string">'lightskyblue'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">    ax1.bar([i + <span class="number">0.35</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_axis], pred_label, width=<span class="number">0.35</span>,</span><br><span class="line">            facecolor=<span class="string">'yellowgreen'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">'Index'</span>, fontsize=<span class="number">7</span>)</span><br><span class="line">    ax1.set_xlabel(<span class="string">'Sample images'</span>, fontsize=<span class="number">7</span>)</span><br><span class="line">    ax1.set_xticks(x_axis)</span><br><span class="line">    x_labels = [<span class="string">'image_&#123;&#125;'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> x_axis]</span><br><span class="line">    ax1.set_xticklabels(x_labels, rotation=<span class="number">45</span>)</span><br><span class="line">    <span class="keyword">for</span> tick <span class="keyword">in</span> ax1.xaxis.get_major_ticks():</span><br><span class="line">        tick.label1.set_fontsize(<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> tick <span class="keyword">in</span> ax1.yaxis.get_major_ticks():</span><br><span class="line">        tick.label1.set_fontsize(<span class="number">7</span>)</span><br><span class="line">    ax1.legend([<span class="string">'gt_label'</span>, <span class="string">'pred_label'</span>], loc=<span class="string">'upper right'</span>)</span><br><span class="line"></span><br><span class="line">    gen_text() <span class="comment"># 重新生成模拟数据</span></span><br><span class="line">    gt_label = []</span><br><span class="line">    pred_label = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> res:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line">            data = line.split(<span class="string">','</span>)</span><br><span class="line">            gt_label.append(float(data[<span class="number">0</span>]))</span><br><span class="line">            pred_label.append(float(data[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    ax2 = plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    ax2.set_title(<span class="string">'Bar 2'</span>, fontsize=<span class="number">7</span>)</span><br><span class="line">    ax2.bar(x_axis, gt_label, width=<span class="number">0.35</span>,</span><br><span class="line">            facecolor=<span class="string">'lightskyblue'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">    ax2.bar([i + <span class="number">0.35</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_axis], pred_label, width=<span class="number">0.35</span>,</span><br><span class="line">            facecolor=<span class="string">'yellowgreen'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">'Index'</span>, fontsize=<span class="number">7</span>)</span><br><span class="line">    ax2.set_xlabel(<span class="string">'Sample images'</span>, fontsize=<span class="number">7</span>)</span><br><span class="line">    ax2.set_xticks(x_axis)</span><br><span class="line">    x_labels = [<span class="string">'image_&#123;&#125;'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> x_axis]</span><br><span class="line">    ax2.set_xticklabels(x_labels, rotation=<span class="number">45</span>)</span><br><span class="line">    <span class="keyword">for</span> tick <span class="keyword">in</span> ax2.xaxis.get_major_ticks():</span><br><span class="line">        tick.label1.set_fontsize(<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> tick <span class="keyword">in</span> ax1.yaxis.get_major_ticks():</span><br><span class="line">        tick.label1.set_fontsize(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    ax2.legend([<span class="string">'gt_label'</span>, <span class="string">'pred_label'</span>], loc=<span class="string">'upper right'</span>)</span><br><span class="line"></span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    <span class="comment"># plt.savefig('test2.png')</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></p>
<p>最后生成的柱状图如下<br></p>
<p><img src="/images/test2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;一、模拟数据生成&quot;&gt;&lt;em&gt;一、模拟数据生成&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;主要目的是将之前生成的测试数据（保存为txt文件）中的数据读取出来，包括groundtruth以及预测数据。&lt;br&gt;文件内容格式如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.9876&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.9623&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.9645&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.9342&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单起见，直接用Python代码随机生成一下文本数据。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gen_text&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Generate Text.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;result.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; res:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gt_label = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pred_label = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.writelines(&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#125;, &amp;#123;&amp;#125;\n&#39;&lt;/span&gt;.format(random.random(), random.random()))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;二、读取文本数据并用matplotlib绘制柱状图&quot;&gt;&lt;em&gt;二、读取文本数据并用matplotlib绘制柱状图&lt;/em&gt;&lt;/h1&gt;&lt;h2 id=&quot;A-_单张柱状图&quot;&gt;&lt;em&gt;A. 单张柱状图&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;读取一个txt文件，生成一幅柱状图，代码参考&lt;a href=&quot;http://www.jianshu.com/p/8c0fe1240e78,&quot; title=&quot;参考链接&quot;&gt;网上的一篇博客&lt;/a&gt;，主要代码如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>jemdoc生成极简主页</title>
    <link href="http://yoursite.com/2016/12/06/jemdoc/"/>
    <id>http://yoursite.com/2016/12/06/jemdoc/</id>
    <published>2016-12-06T10:13:11.000Z</published>
    <updated>2016-12-06T10:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="1-_jemdoc的安装"><em>1. jemdoc的安装</em></h1><p>下面是官网的说明</p>
<blockquote>
<blockquote>
<p>jemdoc is a light text-based markup language designed for creating websites. It takes a text file written with jemdoc markup, an optional configuration file and an optional menu file, and makes static websites that look something like this one, that one or another one.</p>
</blockquote>
</blockquote>
<p>基本上来说，jemdoc用一种类似markdown的语法来生成html页面，需要搭配css，页面比较简洁大方，挺适合做那种极简的主页的。</p>
<p><a href="http://jemdoc.jaboc.net/dist/jemdoc.py" title="jemdoc.py" target="_blank" rel="external">jemdoc</a>本身是一个单Python文件，下载下来就行,下面是Linux系统下的安装，其实就是将jemdoc.py增加执行权限，然后可以直接在终端输入<code>jemdoc</code>来运行。</p>
<blockquote>
<blockquote>
<p>You may like to sudo cp jemdoc.py /usr/bin/jemdoc so that you can just type jemdoc; alternatively, you could add a line to your ~/.bashrc or similar like alias jemdoc=’/somepath/jemdoc.py’. Remember to chmod +x your file to make it executable.</p>
</blockquote>
</blockquote>
<p>偷懒的话，直接输入<code>python jemdoc.py [option]</code>也行，具体的也能直接看源码，也不是很长。<br><a id="more"></a></p>
<hr>
<h1 id="2-_jemdoc的使用"><em>2. jemdoc的使用</em></h1><p>其实大部分功能在官网上都有说明，首先呢，可以写个index.jemdoc的文本文件，然后按照jemdoc的语法写内容，最后通过<code>jemdoc index</code>这条命令就可以把index.jemdoc编译为index.html了。</p>
<p>下面看一下.jemdoc里面的一些语法。<br><a href="http://jemdoc.jaboc.net/example.html" title="样例页面" target="_blank" rel="external">官网上的样例页面</a>介绍了jemdoc的基本语法，和markdown很相似，看看应该就差不多可以写一些基本的了。<br><a href="https://jemnz.com/" target="_blank" rel="external">官方给出的示例主页</a>，应该是作者本人的主页吧！<br><a href="https://jemnz.com/index.jemdoc" target="_blank" rel="external">样例的jemdoc源码</a>，参考一下，基本能写出大概了，其他一些详细的用法，官网上面都有。</p>
<hr>
<h1 id="3-_其它事项"><em>3. 其它事项</em></h1><p>jemdoc生成的页面可以添加菜单（menu），同样创建一个名为“MENU”的文本文件，不带任何后缀，然后直接在里面像下面这样写菜单：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jemdoc</span><br><span class="line">    home                <span class="string">[index.html]</span></span><br><span class="line">    download            <span class="string">[download.html]</span></span><br><span class="line">    revision history    <span class="string">[revision.html]</span></span><br><span class="line">    contact             <span class="string">[contact.html]</span></span><br><span class="line">user's guide</span><br><span class="line">    cheat sheet         <span class="string">[cheatsheet.html]</span></span><br><span class="line">    using               <span class="string">[using.html]</span></span><br><span class="line">goodies</span><br><span class="line">    add a menu          <span class="string">[menu.html]</span></span><br><span class="line">    other stuff         <span class="string">[stuff.html]</span></span><br></pre></td></tr></table></figure>
<p>前面是菜单的名字，后面是菜单对应的html页面，然后在每个相应的html对应的原始jemdoc文件种要加入相应的说明如下：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># jemdoc: menu<span class="list">&#123;MENU&#125;</span><span class="list">&#123;index.html&#125;</span></span><br></pre></td></tr></table></figure>
<p>还有个比较常用的就是，jemdoc生成的html页面默认在最后有个<code>generated by jemdoc</code>之类的说明文字，可以在jemdoc文件第一行加上<code>nofooter</code>来取消生成说明文字。</p>
<p>剩下的就在官网上慢慢探索吧。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;1-_jemdoc的安装&quot;&gt;&lt;em&gt;1. jemdoc的安装&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;下面是官网的说明&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;jemdoc is a light text-based markup language designed for creating websites. It takes a text file written with jemdoc markup, an optional configuration file and an optional menu file, and makes static websites that look something like this one, that one or another one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本上来说，jemdoc用一种类似markdown的语法来生成html页面，需要搭配css，页面比较简洁大方，挺适合做那种极简的主页的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jemdoc.jaboc.net/dist/jemdoc.py&quot; title=&quot;jemdoc.py&quot;&gt;jemdoc&lt;/a&gt;本身是一个单Python文件，下载下来就行,下面是Linux系统下的安装，其实就是将jemdoc.py增加执行权限，然后可以直接在终端输入&lt;code&gt;jemdoc&lt;/code&gt;来运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You may like to sudo cp jemdoc.py /usr/bin/jemdoc so that you can just type jemdoc; alternatively, you could add a line to your ~/.bashrc or similar like alias jemdoc=’/somepath/jemdoc.py’. Remember to chmod +x your file to make it executable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;偷懒的话，直接输入&lt;code&gt;python jemdoc.py [option]&lt;/code&gt;也行，具体的也能直接看源码，也不是很长。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>mxnet之fine tune</title>
    <link href="http://yoursite.com/2016/04/01/mxnet%E4%B9%8Bfine-tune/"/>
    <id>http://yoursite.com/2016/04/01/mxnet之fine-tune/</id>
    <published>2016-04-01T08:55:38.000Z</published>
    <updated>2016-12-06T08:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="一、mxnet环境搭建"><em>一、mxnet环境搭建</em></h1><p>直接从Github上clone下来，配置cfg文件，然后make就行了，配的时候mkl一直报错，最好选择用atblas了。当然了，python的接口不能忘记install。个人感觉，mxnet支持分布式以及多gpu确实比较犀利啊。</p>
<hr>
<h1 id="二、mxnet跑起来"><em>二、mxnet跑起来</em></h1><h2 id="A-_Let_us_begin"><em>A. Let us begin</em></h2><h3 id="a-_image-classification："><em>a. image-classification：</em></h3><p>mxnet在example/image-classification下给了好几个CNN的例子，直接跑起来。<br><a id="more"></a></p>
<h3 id="b-_训练自己的数据"><em>b. 训练自己的数据</em></h3><p>数据创建：<br>    主要利用官方给的im2rec.py文件将图片数据转为rec格式用于网络的输入,下面的.py不全。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        formatter_class=argparse.ArgumentDefaultsHelpFormatter,</span><br><span class="line">        description=<span class="string">'Make an image record database by reading from\</span><br><span class="line">        an image list or creating one'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'prefix'</span>, help=<span class="string">'prefix of input/output files.'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'root'</span>, help=<span class="string">'path to folder containing images.'</span>)</span><br><span class="line"></span><br><span class="line">    cgroup = parser.add_argument_group(<span class="string">'Options for creating image lists'</span>)</span><br><span class="line">    cgroup.add_argument(<span class="string">'--list'</span>, type=bool, default=<span class="keyword">False</span>,</span><br><span class="line">        help=<span class="string">'If this is set im2rec will create image list(s) by traversing root folder\</span><br><span class="line">        and output to &lt;prefix&gt;.lst.\</span><br><span class="line">        Otherwise im2rec will read &lt;prefix&gt;.lst and create a database at &lt;prefix&gt;.rec'</span>)</span><br><span class="line">    cgroup.add_argument(<span class="string">'--exts'</span>, type=list, default=[<span class="string">'.jpeg'</span>,<span class="string">'.jpg'</span>],</span><br><span class="line">        help=<span class="string">'list of acceptable image extensions.'</span>)</span><br><span class="line">    cgroup.add_argument(<span class="string">'--chunks'</span>, type=int, default=<span class="number">1</span>, help=<span class="string">'number of chunks.'</span>)</span><br><span class="line">    cgroup.add_argument(<span class="string">'--train_ratio'</span>, type=float, default=<span class="number">1.0</span>,</span><br><span class="line">        help=<span class="string">'Ratio of images to use for training.'</span>)</span><br><span class="line">    cgroup.add_argument(<span class="string">'--recursive'</span>, type=bool, default=<span class="keyword">False</span>,</span><br><span class="line">        help=<span class="string">'If true recursively walk through subdirs and assign an unique label\</span><br><span class="line">        to images in each folder. Otherwise only include images in the root folder\</span><br><span class="line">        and give them label 0.'</span>)</span><br><span class="line"></span><br><span class="line">    rgroup = parser.add_argument_group(<span class="string">'Options for creating database'</span>)</span><br><span class="line">    rgroup.add_argument(<span class="string">'--resize'</span>, type=int, default=<span class="number">0</span>,</span><br><span class="line">        help=<span class="string">'resize the shorter edge of image to the newsize, original images will\</span><br><span class="line">        be packed by default.'</span>)</span><br><span class="line">    rgroup.add_argument(<span class="string">'--center_crop'</span>, type=bool, default=<span class="keyword">False</span>,</span><br><span class="line">        help=<span class="string">'specify whether to crop the center image to make it rectangular.'</span>)</span><br><span class="line">    rgroup.add_argument(<span class="string">'--quality'</span>, type=int, default=<span class="number">80</span>,</span><br><span class="line">        help=<span class="string">'JPEG quality for encoding, 1-100; or PNG compression for encoding, 1-9'</span>)</span><br><span class="line">    rgroup.add_argument(<span class="string">'--num_thread'</span>, type=int, default=<span class="number">1</span>,</span><br><span class="line">        help=<span class="string">'number of thread to use for encoding. order of images will be different\</span><br><span class="line">        from the input list if &gt;1. the input list will be modified to match the\</span><br><span class="line">        resulting order.'</span>)</span><br><span class="line">    rgroup.add_argument(<span class="string">'--color'</span>, type=int, default=<span class="number">1</span>, choices=[-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        help=<span class="string">'specify the color mode of the loaded image.\</span><br><span class="line">        1: Loads a color image. Any transparency of image will be neglected. It is the default flag.\</span><br><span class="line">        0: Loads image in grayscale mode.\</span><br><span class="line">        -1:Loads image as such including alpha channel.'</span>)</span><br><span class="line">    rgroup.add_argument(<span class="string">'--encoding'</span>, type=str, default=<span class="string">'.jpg'</span>, choices=[<span class="string">'.jpg'</span>, <span class="string">'.png'</span>],</span><br><span class="line">        help=<span class="string">'specify the encoding of the images.'</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.list:</span><br><span class="line">        make_list(args.prefix, args.root, args.recursive,</span><br><span class="line">                  args.exts, args.chunks, args.train_ratio)</span><br><span class="line"></span><br><span class="line">        ori_prefix = args.prefix</span><br><span class="line">        args.prefix = ori_prefix + <span class="string">'_train'</span></span><br><span class="line">        image_list_train = read_list(args.prefix+<span class="string">'.lst'</span>)</span><br><span class="line">        write_record(args, image_list_train)</span><br><span class="line">        args.prefix = ori_prefix + <span class="string">'_val'</span></span><br><span class="line">        image_list_val = read_list(args.prefix+<span class="string">'.lst'</span>)</span><br><span class="line">        write_record(args, image_list_val)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        image_list = read_list(args.prefix+<span class="string">'.lst'</span>)</span><br><span class="line">        write_record(args, image_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>
<p>CNN网络<br>    mxnet里面讲神经网络表示为一个symbol，我们可以直接使用官方提供的symbol_vgg16.py提供的Convnet。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> find_mxnet</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbol</span><span class="params">(num_classes=<span class="number">1000</span>, dataset=<span class="string">'imagenet'</span>)</span>:</span></span><br><span class="line">	data = mx.symbol.Variable(name=<span class="string">"data"</span>)</span><br><span class="line">	conv1_1 = mx.symbol.Convolution(name=<span class="string">'conv1_1'</span>, data=data , num_filter=<span class="number">64</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu1_1 = mx.symbol.Activation(name=<span class="string">'relu1_1'</span>, data=conv1_1 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	conv1_2 = mx.symbol.Convolution(name=<span class="string">'conv1_2'</span>, data=relu1_1 , num_filter=<span class="number">64</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu1_2 = mx.symbol.Activation(name=<span class="string">'relu1_2'</span>, data=conv1_2 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	pool1 = mx.symbol.Pooling(name=<span class="string">'pool1'</span>, data=relu1_2 , pad=(<span class="number">0</span>,<span class="number">0</span>), kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>), pool_type=<span class="string">'max'</span>)</span><br><span class="line">	conv2_1 = mx.symbol.Convolution(name=<span class="string">'conv2_1'</span>, data=pool1 , num_filter=<span class="number">128</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu2_1 = mx.symbol.Activation(name=<span class="string">'relu2_1'</span>, data=conv2_1 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	conv2_2 = mx.symbol.Convolution(name=<span class="string">'conv2_2'</span>, data=relu2_1 , num_filter=<span class="number">128</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu2_2 = mx.symbol.Activation(name=<span class="string">'relu2_2'</span>, data=conv2_2 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	pool2 = mx.symbol.Pooling(name=<span class="string">'pool2'</span>, data=relu2_2 , pad=(<span class="number">0</span>,<span class="number">0</span>), kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>), pool_type=<span class="string">'max'</span>)</span><br><span class="line">	conv3_1 = mx.symbol.Convolution(name=<span class="string">'conv3_1'</span>, data=pool2 , num_filter=<span class="number">256</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu3_1 = mx.symbol.Activation(name=<span class="string">'relu3_1'</span>, data=conv3_1 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	conv3_2 = mx.symbol.Convolution(name=<span class="string">'conv3_2'</span>, data=relu3_1 , num_filter=<span class="number">256</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu3_2 = mx.symbol.Activation(name=<span class="string">'relu3_2'</span>, data=conv3_2 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	conv3_3 = mx.symbol.Convolution(name=<span class="string">'conv3_3'</span>, data=relu3_2 , num_filter=<span class="number">256</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu3_3 = mx.symbol.Activation(name=<span class="string">'relu3_3'</span>, data=conv3_3 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	pool3 = mx.symbol.Pooling(name=<span class="string">'pool3'</span>, data=relu3_3 , pad=(<span class="number">0</span>,<span class="number">0</span>), kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>), pool_type=<span class="string">'max'</span>)</span><br><span class="line">	conv4_1 = mx.symbol.Convolution(name=<span class="string">'conv4_1'</span>, data=pool3 , num_filter=<span class="number">512</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu4_1 = mx.symbol.Activation(name=<span class="string">'relu4_1'</span>, data=conv4_1 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	conv4_2 = mx.symbol.Convolution(name=<span class="string">'conv4_2'</span>, data=relu4_1 , num_filter=<span class="number">512</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu4_2 = mx.symbol.Activation(name=<span class="string">'relu4_2'</span>, data=conv4_2 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	conv4_3 = mx.symbol.Convolution(name=<span class="string">'conv4_3'</span>, data=relu4_2 , num_filter=<span class="number">512</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu4_3 = mx.symbol.Activation(name=<span class="string">'relu4_3'</span>, data=conv4_3 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	pool4 = mx.symbol.Pooling(name=<span class="string">'pool4'</span>, data=relu4_3 , pad=(<span class="number">0</span>,<span class="number">0</span>), kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>), pool_type=<span class="string">'max'</span>)</span><br><span class="line">	conv5_1 = mx.symbol.Convolution(name=<span class="string">'conv5_1'</span>, data=pool4 , num_filter=<span class="number">512</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu5_1 = mx.symbol.Activation(name=<span class="string">'relu5_1'</span>, data=conv5_1 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	conv5_2 = mx.symbol.Convolution(name=<span class="string">'conv5_2'</span>, data=relu5_1 , num_filter=<span class="number">512</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu5_2 = mx.symbol.Activation(name=<span class="string">'relu5_2'</span>, data=conv5_2 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	conv5_3 = mx.symbol.Convolution(name=<span class="string">'conv5_3'</span>, data=relu5_2 , num_filter=<span class="number">512</span>, pad=(<span class="number">1</span>,<span class="number">1</span>), kernel=(<span class="number">3</span>,<span class="number">3</span>), stride=(<span class="number">1</span>,<span class="number">1</span>), no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu5_3 = mx.symbol.Activation(name=<span class="string">'relu5_3'</span>, data=conv5_3 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	pool5 = mx.symbol.Pooling(name=<span class="string">'pool5'</span>, data=relu5_3 , pad=(<span class="number">0</span>,<span class="number">0</span>), kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>), pool_type=<span class="string">'max'</span>)</span><br><span class="line">	flatten_0=mx.symbol.Flatten(name=<span class="string">'flatten_0'</span>, data=pool5)</span><br><span class="line">	fc6 = mx.symbol.FullyConnected(name=<span class="string">'fc6'</span>, data=flatten_0 , num_hidden=<span class="number">4096</span>, no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu6 = mx.symbol.Activation(name=<span class="string">'relu6'</span>, data=fc6 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	drop6 = mx.symbol.Dropout(name=<span class="string">'drop6'</span>, data=relu6 , p=<span class="number">0.500000</span>)</span><br><span class="line">	fc7 = mx.symbol.FullyConnected(name=<span class="string">'fc7'</span>, data=drop6 , num_hidden=<span class="number">4096</span>, no_bias=<span class="keyword">False</span>)</span><br><span class="line">	relu7 = mx.symbol.Activation(name=<span class="string">'relu7'</span>, data=fc7 , act_type=<span class="string">'relu'</span>)</span><br><span class="line">	drop7 = mx.symbol.Dropout(name=<span class="string">'drop7'</span>, data=relu7 , p=<span class="number">0.500000</span>)</span><br><span class="line">	fc8 = mx.symbol.FullyConnected(name=<span class="string">'fc8'</span> <span class="keyword">if</span> dataset == <span class="string">'imagenet'</span> <span class="keyword">else</span> <span class="string">'fc8_%s'</span> % dataset, data=drop7 , num_hidden=num_classes, no_bias=<span class="keyword">False</span>)</span><br><span class="line">	prob = mx.symbol.SoftmaxOutput(name=<span class="string">'softmax'</span>, data=fc8 )</span><br><span class="line">	<span class="keyword">return</span> prob</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    network = get_symbol(<span class="number">4</span>,<span class="string">'ani'</span>)</span><br><span class="line">    lr_scale = &#123;&#125;</span><br><span class="line">    net_args = network.list_arguments()</span><br><span class="line">    <span class="keyword">for</span> i, name <span class="keyword">in</span> enumerate(net_args):</span><br><span class="line">        <span class="keyword">print</span> i,name</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'ani'</span> <span class="keyword">in</span> name:</span><br><span class="line">            lr_scale[i] = <span class="number">10</span></span><br><span class="line">    <span class="keyword">print</span> lr_scale</span><br></pre></td></tr></table></figure></p>
<p>fine tune？<br>    所谓的fine tune，翻译过来应该叫网络的微调。本质上看，训练神经网络首先需要对所有的权限初始化，初始化的好坏可以决定sgd找到的local minimum。而fine tune就是将别人训练好的模型参数作为自己的初始化参数。要注意的是，一般我们输出的类别与别人训练的不一样，所以fc8的参数不能用别人的（压根不匹配），并且需要设置一个lr_scale，以及整个网络较低的lr，保证前面层的参数变得慢，最后的变得快。<br>    下面是具体的train文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> find_mxnet</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> train_model</span><br><span class="line"><span class="comment"># don't use -n and -s, which are resevered for the distributed training</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'train an image classifer on imagenet'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--network'</span>, type=str, default=<span class="string">'vgg16'</span>,</span><br><span class="line">                    choices = [<span class="string">'alexnet'</span>, <span class="string">'vgg'</span>, <span class="string">'googlenet'</span>, <span class="string">'inception-bn'</span>, <span class="string">'inception-bn-full'</span>, <span class="string">'inception-v3'</span>, <span class="string">'vgg16'</span>],</span><br><span class="line">                    help = <span class="string">'the cnn to use'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--data-dir'</span>, type=str,default=<span class="string">'./'</span>,</span><br><span class="line">                    help=<span class="string">'the input data directory'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--model-prefix'</span>, type=str,</span><br><span class="line">                    help=<span class="string">'the prefix of the model to load/save'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--lr'</span>, type=float, default=<span class="number">.001</span>,</span><br><span class="line">                    help=<span class="string">'the initial learning rate'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--lr-factor'</span>, type=float, default=<span class="number">1</span>,</span><br><span class="line">                    help=<span class="string">'times the lr with a factor for every lr-factor-epoch epoch'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--lr-factor-epoch'</span>, type=float, default=<span class="number">1</span>,</span><br><span class="line">                    help=<span class="string">'the number of epoch to factor the lr, could be .5'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--clip-gradient'</span>, type=float, default=<span class="number">5.</span>,</span><br><span class="line">                    help=<span class="string">'clip min/max gradient to prevent extreme value'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--num-epochs'</span>, type=int, default=<span class="number">500</span>,</span><br><span class="line">                    help=<span class="string">'the number of training epochs'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--load-epoch'</span>, type=int,</span><br><span class="line">                    help=<span class="string">"load the model on an epoch using the model-prefix"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--finetune-from'</span>, type=str,</span><br><span class="line">                    help=<span class="string">"finetune from model"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--finetune-lr-scale'</span>, type=float, default=<span class="number">10</span>,</span><br><span class="line">                    help=<span class="string">"finetune layer lr_scale"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--batch-size'</span>, type=int, default=<span class="number">32</span>,</span><br><span class="line">                    help=<span class="string">'the batch size'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--gpus'</span>, type=str,</span><br><span class="line">                    help=<span class="string">'the gpus will be used, e.g "0,1,2,3"'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--kv-store'</span>, type=str, default=<span class="string">'local'</span>,</span><br><span class="line">                    help=<span class="string">'the kvstore type'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--num-examples'</span>, type=int, default=<span class="number">216</span>,</span><br><span class="line">                    help=<span class="string">'the number of training examples'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--num-classes'</span>, type=int, default=<span class="number">4</span>,</span><br><span class="line">                    help=<span class="string">'the number of classes'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--dataset'</span>, type=str, default=<span class="string">'ft'</span>,</span><br><span class="line">                    help=<span class="string">'dataset'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--log-file'</span>, type=str,</span><br><span class="line">		    help=<span class="string">'the name of log file'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--log-dir'</span>, type=str, default=<span class="string">"./tmp/"</span>,</span><br><span class="line">                    help=<span class="string">'directory of the log file'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--train-dataset'</span>, type=str, default=<span class="string">"train.rec"</span>,</span><br><span class="line">                    help=<span class="string">'train dataset name'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--val-dataset'</span>, type=str, default=<span class="string">"val.rec"</span>,</span><br><span class="line">                    help=<span class="string">"validation dataset name"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--data-shape'</span>, type=int, default=<span class="number">224</span>,</span><br><span class="line">                    help=<span class="string">'set image\'s shape'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># network</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">net = importlib.import_module(<span class="string">'symbol_'</span> + args.network).get_symbol(args.num_classes, args.dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_iterator</span><span class="params">(args, kv)</span>:</span></span><br><span class="line">    data_shape = (<span class="number">3</span>, args.data_shape, args.data_shape)</span><br><span class="line">    train = mx.io.ImageRecordIter(</span><br><span class="line">        path_imgrec = os.path.join(args.data_dir, args.train_dataset),</span><br><span class="line">        mean_img = <span class="string">"mean.bin"</span>,</span><br><span class="line">        data_shape  = data_shape,</span><br><span class="line">        batch_size  = args.batch_size,</span><br><span class="line">        rand_crop   = <span class="keyword">True</span>,</span><br><span class="line">        rand_mirror = <span class="keyword">True</span>,</span><br><span class="line">        num_parts   = kv.num_workers,</span><br><span class="line">        part_index  = kv.rank)</span><br><span class="line"></span><br><span class="line">    val = mx.io.ImageRecordIter(</span><br><span class="line">        path_imgrec = os.path.join(args.data_dir, args.val_dataset),</span><br><span class="line">        mean_img = <span class="string">'mean.bin'</span>,</span><br><span class="line">        rand_crop   = <span class="keyword">False</span>,</span><br><span class="line">        rand_mirror = <span class="keyword">False</span>,</span><br><span class="line">        data_shape  = data_shape,</span><br><span class="line">        batch_size  = args.batch_size,</span><br><span class="line">        num_parts   = kv.num_workers,</span><br><span class="line">        part_index  = kv.rank)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (train, val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># train</span></span><br><span class="line">train_model.fit(args, net, get_iterator)</span><br></pre></td></tr></table></figure></p>
<pre><code>上面文件调用的<span class="tag">train_model</span><span class="class">.py</span>文件。<span class="tag">initializer</span>是重点
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> find_mxnet</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(args, network, data_loader)</span>:</span></span><br><span class="line">    <span class="comment"># kvstore</span></span><br><span class="line">    kv = mx.kvstore.create(args.kv_store)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># logging</span></span><br><span class="line">    head = <span class="string">'%(asctime)-15s Node['</span> + str(kv.rank) + <span class="string">'] %(message)s'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'log_file'</span> <span class="keyword">in</span> args <span class="keyword">and</span> args.log_file <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        log_file = args.log_file</span><br><span class="line">        log_dir = args.log_dir</span><br><span class="line">        log_file_full_name = os.path.join(log_dir, log_file)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">            os.mkdir(log_dir)</span><br><span class="line">        logger = logging.getLogger()</span><br><span class="line">        handler = logging.FileHandler(log_file_full_name)</span><br><span class="line">        formatter = logging.Formatter(head)</span><br><span class="line">        handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(handler)</span><br><span class="line">        logger.setLevel(logging.DEBUG)</span><br><span class="line">        logger.info(<span class="string">'start with arguments %s'</span>, args)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.basicConfig(level=logging.DEBUG, format=head)</span><br><span class="line">        logging.info(<span class="string">'start with arguments %s'</span>, args)</span><br><span class="line">        logger = logging</span><br><span class="line"></span><br><span class="line">    <span class="comment"># load model</span></span><br><span class="line">    model_prefix = args.model_prefix</span><br><span class="line">    <span class="keyword">if</span> model_prefix <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        model_prefix += <span class="string">"-%d"</span> % (kv.rank)</span><br><span class="line">    model_args = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> args.load_epoch <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> model_prefix <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">        tmp = mx.model.FeedForward.load(model_prefix, args.load_epoch)</span><br><span class="line">        model_args = &#123;<span class="string">'arg_params'</span> : tmp.arg_params,</span><br><span class="line">                      <span class="string">'aux_params'</span> : tmp.aux_params,</span><br><span class="line">                      <span class="string">'begin_epoch'</span> : args.load_epoch&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.finetune_from <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> args.load_epoch <span class="keyword">is</span> <span class="keyword">None</span></span><br><span class="line">        finetune_from_prefix, finetune_from_epoch = args.finetune_from.rsplit(<span class="string">'-'</span>, <span class="number">1</span>)</span><br><span class="line">        finetune_from_epoch = int(finetune_from_epoch)</span><br><span class="line">        logger.info(<span class="string">'finetune from %s at epoch %d'</span>, finetune_from_prefix, finetune_from_epoch)</span><br><span class="line">        tmp = mx.model.FeedForward.load(finetune_from_prefix, finetune_from_epoch)</span><br><span class="line">        model_args = &#123;<span class="string">'arg_params'</span> : tmp.arg_params,</span><br><span class="line">                      <span class="string">'aux_params'</span> : tmp.aux_params&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># save model</span></span><br><span class="line">    checkpoint = <span class="keyword">None</span> <span class="keyword">if</span> model_prefix <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> mx.callback.do_checkpoint(model_prefix)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data</span></span><br><span class="line">    (train, val) = data_loader(args, kv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># train</span></span><br><span class="line">    devs = mx.cpu() <span class="keyword">if</span> args.gpus <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> [</span><br><span class="line">        mx.gpu(int(i)) <span class="keyword">for</span> i <span class="keyword">in</span> args.gpus.split(<span class="string">','</span>)]</span><br><span class="line"></span><br><span class="line">    epoch_size = args.num_examples / args.batch_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.kv_store == <span class="string">'dist_sync'</span>:</span><br><span class="line">        epoch_size /= kv.num_workers</span><br><span class="line">        model_args[<span class="string">'epoch_size'</span>] = epoch_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'lr_factor'</span> <span class="keyword">in</span> args <span class="keyword">and</span> args.lr_factor &lt; <span class="number">1</span>:</span><br><span class="line">        model_args[<span class="string">'lr_scheduler'</span>] = mx.lr_scheduler.FactorScheduler(</span><br><span class="line">            step = max(int(epoch_size * args.lr_factor_epoch), <span class="number">1</span>),</span><br><span class="line">            factor = args.lr_factor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'clip_gradient'</span> <span class="keyword">in</span> args <span class="keyword">and</span> args.clip_gradient <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        model_args[<span class="string">'clip_gradient'</span>] = args.clip_gradient</span><br><span class="line"></span><br><span class="line">    <span class="comment"># disable kvstore for single device</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'local'</span> <span class="keyword">in</span> kv.type <span class="keyword">and</span> (</span><br><span class="line">            args.gpus <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> len(args.gpus.split(<span class="string">','</span>)) <span class="keyword">is</span> <span class="number">1</span>):</span><br><span class="line">        kv = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># optimizer</span></span><br><span class="line">    batch_size = args.batch_size</span><br><span class="line">    <span class="comment"># reference: model.FeedForward.fit()</span></span><br><span class="line">    <span class="keyword">if</span> kv <span class="keyword">and</span> kv.type == <span class="string">'dist_sync'</span>:</span><br><span class="line">        batch_size *= kv.num_workers</span><br><span class="line">    optimizer = mx.optimizer.create(<span class="string">'sgd'</span>,</span><br><span class="line">        rescale_grad=(<span class="number">1.0</span>/batch_size),</span><br><span class="line">        learning_rate      = args.lr,</span><br><span class="line">        momentum           = <span class="number">0.9</span>,</span><br><span class="line">        wd                 = <span class="number">0.00001</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># lr_scale</span></span><br><span class="line">    <span class="keyword">if</span> args.finetune_from <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># convention: for argument param_name, if args.dataset in param_name, then it is</span></span><br><span class="line">        <span class="comment"># to be fine-tuned</span></span><br><span class="line">        lr_scale = &#123;&#125;</span><br><span class="line">        net_args = network.list_arguments()</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> enumerate(net_args):</span><br><span class="line">            <span class="keyword">if</span> args.dataset <span class="keyword">in</span> name:</span><br><span class="line">                lr_scale[i] = args.finetune_lr_scale</span><br><span class="line">        optimizer.set_lr_scale(lr_scale)</span><br><span class="line">        logger.info(<span class="string">'lr_scale: %s'</span>, &#123;net_args[i]: s <span class="keyword">for</span> i,s <span class="keyword">in</span> lr_scale.items()&#125;)</span><br><span class="line"></span><br><span class="line">    params = args.finetune_from + <span class="string">'.params'</span></span><br><span class="line">    model = mx.model.FeedForward(</span><br><span class="line">        ctx                = devs,</span><br><span class="line">        symbol             = network,</span><br><span class="line">        num_epoch          = args.num_epochs,</span><br><span class="line">        initializer        = mx.init.Load(params,default_init = mx.init.Xavier(factor_type=<span class="string">"in"</span>, magnitude=<span class="number">2.34</span>)),</span><br><span class="line">        optimizer          = optimizer,</span><br><span class="line">        **model_args)</span><br><span class="line"></span><br><span class="line">    model.fit(</span><br><span class="line">        X                  = train,</span><br><span class="line">        eval_data          = val,</span><br><span class="line">        kvstore            = kv,</span><br><span class="line">        batch_end_callback = mx.callback.Speedometer(args.batch_size, <span class="number">50</span>),</span><br><span class="line">        epoch_end_callback = checkpoint)</span><br><span class="line">    model.save(args.dataset)</span><br></pre></td></tr></table></figure>
<h2 id="B-_模型使用"><em>B. 模型使用</em></h2><h3 id="a-_网络模型及权重文件"><em>a. 网络模型及权重文件</em></h3><ol>
<li><p>xx.json<br> 这个文件是保存的整个convnet的结构，即mxnet的symbol对象，可以直接将json文件转为symbol对象，并把网络画出来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'draw CNN network from json file'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--json'</span>, type=str,help=<span class="string">'the input json file'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">sy = mx.symbol.load(args.json)</span><br><span class="line">a = mx.viz.plot_network(sy)</span><br><span class="line">a.view()</span><br></pre></td></tr></table></figure>
</li>
<li><p>xx.params<br> 这个文件是保存的整个convnet的权重的参数，可以用于今后的predict</p>
</li>
</ol>
<h3 id="b-_训练得到的模型的应用"><em>b. 训练得到的模型的应用</em></h3><ol>
<li>利用convnet进行predict<br> 简言之，给张图片来用训练得到的模型进行分类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io,transform</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">'test2'</span></span><br><span class="line">epoch = <span class="number">2000</span></span><br><span class="line">model = mx.model.FeedForward.load(prefix,epoch,ctx=mx.gpu(),numpy_batch_size=<span class="number">1</span>)</span><br><span class="line">synset = [l.strip() <span class="keyword">for</span> l <span class="keyword">in</span> open(<span class="string">'synset.txt'</span>).readlines()]</span><br><span class="line"></span><br><span class="line">mean_img = mx.nd.load(<span class="string">'mean.bin'</span>).values()[<span class="number">0</span>].asnumpy()</span><br><span class="line"></span><br><span class="line">test_img = <span class="string">'car1.jpg'</span></span><br><span class="line">img = io.imread(test_img)</span><br><span class="line">io.imshow(img)</span><br><span class="line"></span><br><span class="line">short_edge = min(img.shape[:<span class="number">2</span>])</span><br><span class="line">yy = int((img.shape[<span class="number">0</span>] - short_edge)/<span class="number">2</span>)</span><br><span class="line">xx = int((img.shape[<span class="number">1</span>] - short_edge)/<span class="number">2</span>)</span><br><span class="line">crop_img = img[yy:yy + short_edge,xx:xx + short_edge]</span><br><span class="line"></span><br><span class="line">resized_img = transform.resize(crop_img,(<span class="number">224</span>,<span class="number">224</span>))</span><br><span class="line">sample = np.asarray(resized_img)*<span class="number">256</span></span><br><span class="line">sample = np.swapaxes(sample,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">sample = np.swapaxes(sample,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">normed_img = sample - mean_img</span><br><span class="line">normed_img.resize(<span class="number">1</span>,<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>)</span><br><span class="line"></span><br><span class="line">batch = normed_img</span><br><span class="line">prob = model.predict(batch)[<span class="number">0</span>]</span><br><span class="line">pred = np.argsort(prob)[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">top1 = pred[<span class="number">0</span>]</span><br><span class="line">print(test_img,<span class="string">" Top1: "</span>, synset[top1])</span><br><span class="line"><span class="keyword">print</span> prob</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="c-_让我再说几句"><em>c. 让我再说几句</em></h3><p>官方提供了讲caffemodel转为mxnet的params的工具；从头训练的模型根本不能用，只能fine tune（数据集较小）</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;一、mxnet环境搭建&quot;&gt;&lt;em&gt;一、mxnet环境搭建&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;直接从Github上clone下来，配置cfg文件，然后make就行了，配的时候mkl一直报错，最好选择用atblas了。当然了，python的接口不能忘记install。个人感觉，mxnet支持分布式以及多gpu确实比较犀利啊。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;二、mxnet跑起来&quot;&gt;&lt;em&gt;二、mxnet跑起来&lt;/em&gt;&lt;/h1&gt;&lt;h2 id=&quot;A-_Let_us_begin&quot;&gt;&lt;em&gt;A. Let us begin&lt;/em&gt;&lt;/h2&gt;&lt;h3 id=&quot;a-_image-classification：&quot;&gt;&lt;em&gt;a. image-classification：&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;mxnet在example/image-classification下给了好几个CNN的例子，直接跑起来。&lt;br&gt;
    
    </summary>
    
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>rsync跨平台同步</title>
    <link href="http://yoursite.com/2015/12/22/rsync%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2015/12/22/rsync跨平台同步/</id>
    <published>2015-12-22T01:32:17.000Z</published>
    <updated>2016-12-06T08:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="一、rsync功能描述"><em>一、rsync功能描述</em></h1><pre><code>通过rsync完成客户端文件改变，向服务端进行相应同步。
</code></pre><hr>
<h1 id="二、rsync具体实现"><em>二、rsync具体实现</em></h1><h2 id="A-_Ubuntu同步至Ubuntu"><em>A. Ubuntu同步至Ubuntu</em></h2><h3 id="a-_Ubuntu服务器端配置："><em>a. Ubuntu服务器端配置：</em></h3><ol>
<li><p>修改rsync配置文件,将false改为true，以启用rsync：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span><span class="keyword">default</span><span class="regexp">/rsync</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将配置文件的示例拷贝到/etc下</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>share<span class="regexp">/doc/</span>rsync<span class="regexp">/examples/</span>rsyncd.conf <span class="regexp">/etc/</span>rsyncd.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据需求修改文件rsyncd.conf如下（//后为说明，配置时不要写）</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/rsyncd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p> 配置文件如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># sample rsyncd.conf configuration file</span><br><span class="line"></span><br><span class="line"># GLOBAL OPTIONS</span><br><span class="line"></span><br><span class="line"># motd file=/etc/motd</span><br><span class="line">  log file=/var/log/rsyncd  //建议开启，查错必备</span><br><span class="line"># for pid file, <span class="operator"><span class="keyword">do</span> <span class="keyword">not</span> <span class="keyword">use</span> /<span class="keyword">var</span>/run/rsync.pid <span class="keyword">if</span></span><br><span class="line"># you <span class="keyword">are</span> going <span class="keyword">to</span> run rsync <span class="keyword">out</span> <span class="keyword">of</span> the init.<span class="keyword">d</span> script.</span><br><span class="line"># The init.<span class="keyword">d</span> script does its own pid <span class="keyword">file</span> handling,</span><br><span class="line"># so omit the <span class="string">"pid file"</span> line completely <span class="keyword">in</span> that <span class="keyword">case</span>.</span><br><span class="line"># pid <span class="keyword">file</span>=/<span class="keyword">var</span>/run/rsyncd.pid</span><br><span class="line"># syslog facility=daemon</span><br><span class="line"># socket options=</span><br><span class="line">  auth <span class="keyword">users</span> = <span class="keyword">user</span>  //允许登录名</span><br><span class="line">  secrets <span class="keyword">file</span> = /etc/rsyncd.secrets  //密码文件</span><br><span class="line"></span><br><span class="line"># <span class="keyword">MODULE</span> OPTIONS</span><br><span class="line"></span><br><span class="line">[<span class="keyword">test</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">comment</span> = <span class="keyword">public</span> <span class="keyword">archive</span></span><br><span class="line">  <span class="keyword">path</span> = /home/<span class="keyword">user</span>/rsyncTest  //服务器同步路径</span><br><span class="line">  <span class="keyword">use</span> chroot = yes</span><br><span class="line"># <span class="keyword">max</span> connections=<span class="number">10</span></span><br><span class="line"># <span class="keyword">lock</span> <span class="keyword">file</span> = /<span class="keyword">var</span>/<span class="keyword">lock</span>/rsyncd</span><br><span class="line"># the <span class="keyword">default</span> <span class="keyword">for</span> <span class="keyword">read</span> <span class="keyword">only</span> <span class="keyword">is</span> yes...</span><br><span class="line">  <span class="keyword">read</span> <span class="keyword">only</span> = <span class="keyword">no</span></span><br><span class="line">  <span class="keyword">list</span> = yes</span><br><span class="line">  uid = <span class="keyword">user</span></span><br><span class="line">  gid = <span class="keyword">user</span>  //执行的用户和组，与登录的用户无关</span><br><span class="line"># <span class="keyword">exclude</span> =</span><br><span class="line"># <span class="keyword">exclude</span> <span class="keyword">from</span> =</span><br><span class="line"># <span class="keyword">include</span> =</span><br><span class="line"># <span class="keyword">include</span> <span class="keyword">from</span> =</span><br><span class="line">  <span class="keyword">strict</span> modes = yes  //严格模式，检查密码文件的权限（需要<span class="number">600</span>）</span><br><span class="line">  <span class="keyword">hosts</span> <span class="keyword">allow</span> = <span class="number">192.168</span><span class="number">.111</span><span class="number">.111</span>,<span class="number">192.168</span><span class="number">.111</span><span class="number">.112</span> //允许访问的IP</span><br><span class="line"># <span class="keyword">hosts</span> deny =</span><br><span class="line">  <span class="keyword">ignore</span> <span class="keyword">errors</span> = <span class="keyword">no</span></span><br><span class="line">  <span class="keyword">ignore</span> nonreadable = yes</span><br><span class="line">  transfer <span class="keyword">logging</span> = <span class="keyword">no</span></span><br><span class="line"># <span class="keyword">log</span> <span class="keyword">format</span> = %<span class="keyword">t</span>: host %h (%a) %o %<span class="keyword">f</span> (%<span class="keyword">l</span> <span class="keyword">bytes</span>). Total %b <span class="keyword">bytes</span>.</span><br><span class="line">  <span class="keyword">timeout</span> = <span class="number">600</span></span><br><span class="line">  refuse options = <span class="keyword">checksum</span> dry-run</span><br><span class="line">  dont <span class="keyword">compress</span> = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑密码文件</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>rsyncd.secrets</span><br></pre></td></tr></table></figure>
<p> 文件如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">user:</span>passwd <span class="comment">//用户名：密码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启用rsync服务</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service rsync <span class="literal">start</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<h3 id="b-_Ubuntu客户端配置："><em>b. Ubuntu客户端配置：</em></h3><ol>
<li><p>创建并编辑脚本rsync_inotify.sh如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#inotify scan path ,backup to remote server</span></span><br><span class="line">src=/usr/hadoop/conf/  //需要同步的目录</span><br><span class="line">remote=<span class="number">192.168</span>.<span class="number">111.111</span>::<span class="built_in">test</span></span><br><span class="line">/usr/bin/inotifywait -mrq --timefmt <span class="string">'%d/%m/%y %H:%M'</span> --format <span class="string">'%T %w%f%e'</span> <span class="operator">-e</span> close_write,delete,create,attrib <span class="variable">$src</span> | <span class="keyword">while</span> <span class="built_in">read</span> files</span><br><span class="line"><span class="keyword">do</span>                                                                                                                     </span><br><span class="line">/usr/bin/rsync -vzrtopg --delete --progress --password-file=/etc/rsyncd.pass <span class="variable">$src</span> <span class="variable">$remote</span>             </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;files&#125;</span> was rsynced"</span> &gt;&gt; /var/<span class="built_in">log</span>/rsync.log <span class="number">2</span>&gt;&amp;<span class="number">1</span>                                                              </span><br><span class="line"><span class="keyword">done</span>                                                                                                                   </span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑密码文件</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rsyncd.<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p> 文件如下：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd	<span class="comment">//只需要密码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>以管理员身份运行脚本</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">sh</span> rsync-inotify.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p> 或者后台运行</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohub sudo <span class="keyword">sh</span> rsync-inotify.<span class="keyword">sh</span>&gt;rsync.<span class="keyword">log</span>&amp;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="c-_注意点："><em>c. 注意点：</em></h3><pre><code>开启严格模式后，密码文件的权限要为<span class="number">600</span>
</code></pre><h2 id="B-_Ubuntu同步至Windows"><em>B. Ubuntu同步至Windows</em></h2><h3 id="a-_Windows服务器端配置"><em>a. Windows服务器端配置</em></h3><ol>
<li><p>软件安装（服务器端安装cwRsyncServer）<br>cwRsync是Rsync在Windows上的实现版本，Rsync通过使用特定算法的文件传输技术，可以在网络上传输只修改了的文件。<br>cwRsync主要用于Windows上的远程文件同步备份和同步，它包含Cygwin DLL和适用Cygwin版本的Rsync两部分。<br>cwRsync分为Server和Client，本文使用的版本为4.1.0，下载地址如下：<br>cwRsyncServer v4.1.0：<a href="http://pan.baidu.com/s/1eQpaIVw" target="_blank" rel="external">http://pan.baidu.com/s/1eQpaIVw</a><br>cwRsync v4.1.0：<a href="http://pan.baidu.com/s/1pJ3B1FX" target="_blank" rel="external">http://pan.baidu.com/s/1pJ3B1FX</a></p>
</li>
<li><p>服务配置，软件安装目录下rsyncd.conf文件（与Ubuntu类似）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">use</span> chroot = <span class="literal">false</span></span><br><span class="line"><span class="keyword">strict</span> modes = <span class="literal">false</span>  //严格模式关闭</span><br><span class="line"><span class="keyword">hosts</span> <span class="keyword">allow</span> = <span class="number">192.168</span><span class="number">.40</span><span class="number">.126</span>,<span class="number">192.168</span><span class="number">.40</span><span class="number">.229</span> //允许的IP</span><br><span class="line"><span class="keyword">log</span> <span class="keyword">file</span> = rsyncd.<span class="keyword">log</span></span><br><span class="line">port = <span class="number">873</span></span><br><span class="line">uid = <span class="number">0</span></span><br><span class="line">gid = <span class="number">0</span></span><br><span class="line">auth <span class="keyword">users</span>=dl</span><br><span class="line">secrets <span class="keyword">file</span>=/cygdrive/<span class="keyword">g</span>/ICW/rsyncd.secrets</span><br><span class="line"># <span class="keyword">Module</span> definitions</span><br><span class="line"># Remember cygwin naming conventions : <span class="keyword">c</span>:\<span class="keyword">work</span> becomes /cygwin/<span class="keyword">c</span>/<span class="keyword">work</span></span><br><span class="line">#</span><br><span class="line">[xb]</span><br><span class="line"><span class="keyword">path</span> = /cygdrive/<span class="keyword">g</span>/<span class="keyword">ftp</span>/usr/xb/共享/rsync</span><br><span class="line"><span class="keyword">read</span> <span class="keyword">only</span> = <span class="literal">false</span></span><br><span class="line">transfer <span class="keyword">logging</span> = yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>密码文件rsyncd.secrets</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">user:</span>passwd <span class="comment">//用户名：密码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务<br> 在Server机器上运行services.msc，选择服务”RsyncServer”配置启动类型为”自动”，启动该服务。</p>
</li>
</ol>
<h3 id="b-_Ubuntu客户端配置（同上）："><em>b. Ubuntu客户端配置（同上）：</em></h3><h3 id="c-_注意点：-1"><em>c. 注意点：</em></h3><pre><code>Windows下建议关闭严格模式，折腾了好久搞不定。
</code></pre><h2 id="C-_Windows同步至Ubuntu"><em>C. Windows同步至Ubuntu</em></h2><h3 id="a-_Ubuntu服务器端配置（同上）："><em>a. Ubuntu服务器端配置（同上）：</em></h3><h3 id="b-_Windows客户端配置："><em>b. Windows客户端配置：</em></h3><ol>
<li>软件安装（客户端安装cwRsync）</li>
<li><p>新建同步脚本</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avrz --progress --password-<span class="keyword">file</span>=<span class="regexp">/cygdrive/</span>d<span class="regexp">/cwRsync/</span>rsyncd.secrets <span class="regexp">/cygdrive/</span>d<span class="regexp">/cwRsync/</span>test<span class="regexp">/ deeplearning@192.168.40.79::test</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>密码文件rsyncd.secrets</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd	<span class="comment">//只需要密码</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="c-_编写计划任务"><em>c. 编写计划任务</em></h3><pre><code>打开windows任务计划程序，创建基本任务，可以每天定时运行同步脚本
</code></pre><h2 id="D-_Windows同步至Windows（服务器端和客户端配置同上）"><em>D. Windows同步至Windows（服务器端和客户端配置同上）</em></h2><hr>
<h1 id="三、问题"><em>三、问题</em></h1><h2 id="A-_同步的文件名有中文会乱码，内容有中文无所谓"><em>A. 同步的文件名有中文会乱码，内容有中文无所谓</em></h2><h2 id="B-_Windows向ubuntu服务器同步文件后，文件的权限是000，需要chmod后才能使用。"><em>B. Windows向ubuntu服务器同步文件后，文件的权限是000，需要chmod后才能使用。</em></h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;一、rsync功能描述&quot;&gt;&lt;em&gt;一、rsync功能描述&lt;/em&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;通过rsync完成客户端文件改变，向服务端进行相应同步。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;二、rsync具体实现&quot;&gt;&lt;em&gt;二、rsync具体实现&lt;/em&gt;&lt;/h1&gt;&lt;h2 id=&quot;A-_Ubuntu同步至Ubuntu&quot;&gt;&lt;em&gt;A. Ubuntu同步至Ubuntu&lt;/em&gt;&lt;/h2&gt;&lt;h3 id=&quot;a-_Ubuntu服务器端配置：&quot;&gt;&lt;em&gt;a. Ubuntu服务器端配置：&lt;/em&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改rsync配置文件,将false改为true，以启用rsync：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim &lt;span class=&quot;regexp&quot;&gt;/etc/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/rsync&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将配置文件的示例拷贝到/etc下&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp &lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;regexp&quot;&gt;/doc/&lt;/span&gt;rsync&lt;span class=&quot;regexp&quot;&gt;/examples/&lt;/span&gt;rsyncd.conf &lt;span class=&quot;regexp&quot;&gt;/etc/&lt;/span&gt;rsyncd.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据需求修改文件rsyncd.conf如下（//后为说明，配置时不要写）&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo &lt;span class=&quot;keyword&quot;&gt;vim&lt;/span&gt; /etc/rsyncd.&lt;span class=&quot;keyword&quot;&gt;conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 配置文件如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# sample rsyncd.conf configuration file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# GLOBAL OPTIONS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# motd file=/etc/motd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log file=/var/log/rsyncd  //建议开启，查错必备&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# for pid file, &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; /&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/run/rsync.pid &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# you &lt;span class=&quot;keyword&quot;&gt;are&lt;/span&gt; going &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; run rsync &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the init.&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt; script.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# The init.&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt; script does its own pid &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; handling,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# so omit the &lt;span class=&quot;string&quot;&gt;&quot;pid file&quot;&lt;/span&gt; line completely &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; that &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# pid &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;=/&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/run/rsyncd.pid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# syslog facility=daemon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# socket options=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  auth &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;  //允许登录名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  secrets &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; = /etc/rsyncd.secrets  //密码文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;MODULE&lt;/span&gt; OPTIONS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;archive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;path&lt;/span&gt; = /home/&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;/rsyncTest  //服务器同步路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; chroot = yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;max&lt;/span&gt; connections=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; = /&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;lock&lt;/span&gt;/rsyncd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# the &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; yes...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;only&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt; = yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uid = &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gid = &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;  //执行的用户和组，与登录的用户无关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;exclude&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;exclude&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;strict&lt;/span&gt; modes = yes  //严格模式，检查密码文件的权限（需要&lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;hosts&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;allow&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.111&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.111&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.111&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.112&lt;/span&gt; //允许访问的IP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;hosts&lt;/span&gt; deny =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;errors&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;ignore&lt;/span&gt; nonreadable = yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  transfer &lt;span class=&quot;keyword&quot;&gt;logging&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;format&lt;/span&gt; = %&lt;span class=&quot;keyword&quot;&gt;t&lt;/span&gt;: host %h (%a) %o %&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; (%&lt;span class=&quot;keyword&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bytes&lt;/span&gt;). Total %b &lt;span class=&quot;keyword&quot;&gt;bytes&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;timeout&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  refuse options = &lt;span class=&quot;keyword&quot;&gt;checksum&lt;/span&gt; dry-run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dont &lt;span class=&quot;keyword&quot;&gt;compress&lt;/span&gt; = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑密码文件&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim &lt;span class=&quot;regexp&quot;&gt;/etc/&lt;/span&gt;rsyncd.secrets&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 文件如下：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;passwd &lt;span class=&quot;comment&quot;&gt;//用户名：密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启用rsync服务&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo service rsync &lt;span class=&quot;literal&quot;&gt;start&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Computer Science" scheme="http://yoursite.com/tags/Computer-Science/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Hexo安装</title>
    <link href="http://yoursite.com/2015/12/02/Ubuntu%E4%B8%8BHexo%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2015/12/02/Ubuntu下Hexo安装/</id>
    <published>2015-12-02T00:59:43.000Z</published>
    <updated>2016-12-06T08:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="1-_Nodejs的安装"><em>1. Nodejs的安装</em></h1><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install -y python-software-properties software-properties-common  </span><br><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:chris-lea/node.js  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h1 id="2-_nrm的安装"><em>2. nrm的安装</em></h1><p>使用nrm切换npm的源，一般使用taobao的源，速度比较快<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> nrm</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="3-_nrm更换npm的源"><em>3. nrm更换npm的源</em></h1><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm <span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env nodejs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：由于nodejs的安装及其它神秘原因，此时需要在/usr/local/bin目录下打开nrm文件将其中第一行的“node”修改未“nodejs”（其他用npm安装的包也是如此）</p>
</blockquote>
<hr>
<h1 id="4-_npm安装hexo"><em>4. npm安装hexo</em></h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo-cli</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="5-_hexo的配置"><em>5. hexo的配置</em></h1><p>如果需要将hexo生成的博客发布到Github，需要进行相应ssh的配置</p>
<ol>
<li><p>生成ssh公钥</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -<span class="constant">C </span><span class="string">"ysfalo@163.com"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>密码设为空就行</p>
</blockquote>
</li>
<li><p>添加ssh公钥到Github<br>将<em>~/.ssh/id_rsa.pub</em>添加到Github里面中</p>
</li>
<li><p>测试ssh</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -<span class="constant">T</span> git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>Github配置</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user<span class="class">.name</span> <span class="string">"ysfalo"</span><span class="comment">//用户名</span></span><br><span class="line">$ git config --global user<span class="class">.email</span>  <span class="string">"ysfalo@163.com"</span><span class="comment">//填写自己的邮箱</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Hexo常用命令</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> clean <span class="comment"># clean</span></span><br><span class="line">hexo n xxx <span class="comment"># new article</span></span><br><span class="line">hexo g <span class="comment"># generate</span></span><br><span class="line">hexo s <span class="comment"># server （测试）</span></span><br><span class="line">hexo d <span class="comment"># deploy （部署）</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;1-_Nodejs的安装&quot;&gt;&lt;em&gt;1. Nodejs的安装&lt;/em&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install -y python-software-properties software-properties-common  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo&lt;span class=&quot;instruction&quot;&gt; add-apt-repository &lt;/span&gt;ppa:chris-lea/node.js  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install nodejs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>云平台之Linux基础</title>
    <link href="http://yoursite.com/2015/11/21/%E4%BA%91%E5%B9%B3%E5%8F%B0%E4%B9%8BLinux%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2015/11/21/云平台之Linux基础/</id>
    <published>2015-11-21T08:18:01.000Z</published>
    <updated>2016-12-06T08:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu修改_IP"><em>Ubuntu修改 IP</em></h1><ol>
<li><p>修改静态IP，并替换有关<em>eth0</em>的行：  </p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/network/interfaces<span class="string">"</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># The primary network interface</span></span><br><span class="line"><span class="keyword">auto</span> eth0   </span><br><span class="line">iface eth0 inet <span class="keyword">static</span></span><br><span class="line">address <span class="number">192.168</span>.XXX.XXX</span><br><span class="line">gateway <span class="number">192.168</span>.XXX<span class="number">.254</span></span><br><span class="line">netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>设置DNS：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/resolvconf/resolv<span class="class">.conf</span><span class="class">.d</span>/base</span><br></pre></td></tr></table></figure>
<p> 插入 <em>nameserver 202.103.24.68</em></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> resolvconf -u</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启网络服务:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/networking restart</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h1 id="SSH免密码登录"><em>SSH免密码登录</em></h1><ol>
<li><p>创建公钥和密钥，用 <em>ssh-key-gen</em> 在本地主机上创建公钥和密钥  </p>
<figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t  rsa -<span class="keyword">P</span> <span class="string">''</span></span><br></pre></td></tr></table></figure>
<p> 在用户目录下查看用户目录 <em>.ssh</em> 文件夹  </p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> .ssh</span><br><span class="line"><span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
<p> 应该有 <em>id_ras id_rsa.pub</em></p>
</li>
<li><p>把公钥复制到远程主机用<em>ssh-copy-id</em>把公钥复制到远程主机上（这一步相当于先复制到B主机加上添加到B主机的authorizeskes里面两步）  </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id usename@<span class="number">192.168</span><span class="class">.XXX</span><span class="class">.XXX</span></span><br></pre></td></tr></table></figure>
<p> 会提示输入密码</p>
</li>
<li><p>直接登录远程主机  </p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ssh</span> remote-host</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h1 id="ssh后台运行脚本"><em>ssh后台运行脚本</em></h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohub <span class="keyword">sh</span> train_lenet.<span class="keyword">sh</span> &gt; <span class="keyword">log</span>.txt&amp;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Linux常用操作"><em>Linux常用操作</em></h1><ol>
<li><p>修改文件或目录所属的用户/组</p>
<ol>
<li><p>使用chown命令可以修改文件或目录所属的用户：<br> 命令：<em>chown 用户 目录或文件名</em><br> 例如：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown qq <span class="regexp">/home/</span>qq</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把home目录下的qq目录的拥有者改为qq用户</p>
</blockquote>
</li>
<li><p>使用chgrp命令可以修改文件或目录所属的组：<br> 命令：<em>chgrp 组 目录或文件名</em><br> 例如：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp qq <span class="regexp">/home/</span>qq</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把home目录下的qq目录的所属组改为qq组</p>
</blockquote>
</li>
<li><p>常用  </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="string">air:</span>air <span class="regexp">/usr/</span>hadoop</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>删除文件夹  </p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="built_in">folders</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>fbric使用  </p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fab -f <span class="string">[files]</span> <span class="string">[def]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Ubuntu环境变量<br> hadoop环境变量配置  </p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<p> 添加</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/usr/hadoop</span><br><span class="line">export PATH=<span class="variable">$HADOOP</span>_HOME/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p> 然后</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h1 id="python调用_shell脚本的两种方法"><em>python调用 shell脚本的两种方法</em></h1><ul>
<li><p>python调用Shell脚本，有两种方法：<em>os.system(cmd)</em> 或 <em>os.popen(cmd)</em>,前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容。实际使用时视需求情况而选择.<br>  现假定有一个shell脚本 <em>test.sh</em>：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world!"</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>  使用 <em>os.system(cmd):</em> 该方法在调用完shell脚本后，返回一个16位的二进制数，低位为杀死所调用脚本的信号号码，高位为脚本的退出状态码，即脚本中 <em>“exit 1”</em> 的代码执行后，<em>os.system</em> 函数返回值的高位数则是1，如果低位数是0的情况下，则函数的返回值是0×100,换算为10进制得到256。<br>  如果我们需要获得 <em>os.system</em> 的正确返回值，那使用位移运算可以还原返回值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>n = os.system(test.sh)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>n &gt;&gt; <span class="number">8</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>  使用 <em>os.popen(cmd):</em> 这种调用方式是通过管道的方式来实现，函数返回一个file-like的对象，里面的内容是脚本输出的内容（可简单理解为echo输出的内容）。<br>  像调用<em>”ls”</em>这样的shell命令，应该使用popen的方法来获得内容。*</p>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ubuntu修改_IP&quot;&gt;&lt;em&gt;Ubuntu修改 IP&lt;/em&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改静态IP，并替换有关&lt;em&gt;eth0&lt;/em&gt;的行：  &lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vi /etc/network/interfaces&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# The primary network interface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; eth0   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iface eth0 inet &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;address &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;.XXX.XXX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gateway &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;.XXX&lt;span class=&quot;number&quot;&gt;.254&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netmask &lt;span class=&quot;number&quot;&gt;255.255&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.255&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Computer Science" scheme="http://yoursite.com/tags/Computer-Science/"/>
    
  </entry>
  
  <entry>
    <title>常用机器学习框架</title>
    <link href="http://yoursite.com/2015/11/21/%E5%B8%B8%E7%94%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2015/11/21/常用机器学习框架/</id>
    <published>2015-11-21T05:50:25.000Z</published>
    <updated>2016-12-06T08:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="DMTK"><em>DMTK</em></h1><ul>
<li>项目地址: <a href="https://github.com/Microsoft/DMTK" target="_blank" rel="external">https://github.com/Microsoft/DMTK</a></li>
<li>文档地址: <a href="[http://www.dmtk.io/document.html">http://www.dmtk.io/document.html</a></li>
<li>项目语言: CPP</li>
<li>项目简介:<br><ul>
<li>DMTK分布式机器学习框架：<br>它由参数服务器和客户端软件开发包（SDK）两部分构成。参数服务器在原有基础上从性能和功能上都得到了进一步提升——支持存储混合数据结构模型、 接受并聚合工作节点服务器的数据模型更新、控制模型同步逻辑等。客户端软件开发包（SDK）支持维护节点模型缓存（与全局模型服务器同步）、节点模型训练 和模型通讯的流水线控制、以及片状调度大模型训练等。<a id="more"></a></li>
<li>LightLDA：<br>LightLDA是一种全新的用于训练主题模型，计算复杂度与主题数目无关的高效算法。在其分布式实现中，我们做了大量的系统优化使得 LightLDA能够在一个普通计算机集群上处理超大规模的数据和模型。例如，在一个由8台计算机组成的集群上，我们可以在具有2千亿训练样本 （token）的数据集上训练具有1百万词汇表和1百万个话题（topic）的LDA模型（约1万亿个参数），这种规模的实验以往要在数千台计算机的集群 上才能运行。</li>
<li>分布式词向量：<br>词向量技术近来被普遍地应用于计算词汇的语义表示，它可以用作很多自然语言处理任务的词特征。我们为两种计算词向量的算法提供了高效的分步式实现：<ol>
<li>一种是标准的word2vec算法</li>
<li>另一种是可以对多义词计算多个词向量的新算法</li>
</ol>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="TensorFlow"><em>TensorFlow</em></h1><ul>
<li>项目地址:    <a href="http://tensorflow.org/" target="_blank" rel="external">http://tensorflow.org/</a></li>
<li>项目语言:  Python</li>
<li>项目简介:<br><ul>
<li>TensorFlow是谷歌研发的第二代人工智能学习系统，而第一代的DistBelief比这个要早好多年。</li>
<li>TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。</li>
<li>此外，TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从电话、单个CPU / GPU到成百上千GPU卡组成的分布式系统。也就是说，任何基于梯度的机器学习算法都能够受益于TensorFlow的自动分化（auto- differentiation）。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Torch"><em>Torch</em></h1><ul>
<li>项目地址:    <a href="https://github.com/torch/torch7" target="_blank" rel="external">https://github.com/torch/torch7</a></li>
<li>项目博客:    <a href="http://torch.ch/blog/" target="_blank" rel="external">http://torch.ch/blog/</a></li>
<li>项目语言:  Lua</li>
<li>项目简介:<br><ul>
<li>Torch并没有跟随Python的潮流，它是基于Lua的。对于解释器没有必要像Matlab或者Python那样，Lua会给你神奇的控制台。Torch被Facebook人工智能研究实验室和位于伦敦的谷歌DeepMind大量使用。Torch is a scientific computing framework with wide support for machine learning algorithms. It is &gt; &gt; easy to use and efficient, thanks to an easy and fast scripting language, LuaJIT, and an underlying &gt; C/CUDA implementation.<br>A summary of core features:<br>a powerful N-dimensional array<br>lots of routines for indexing, slicing, transposing, …<br>amazing interface to C, via LuaJIT<br>linear algebra routines<br>neural network, and energy-based models<br>numeric optimization routines<br>Fast and efficient GPU support<br>Embeddable, with ports to iOS, Android and FPGA backends</li>
</ul>
</li>
</ul>
<hr>
<h1 id="GraphLab"><em>GraphLab</em></h1><ul>
<li>项目简介:    <a href="http://www.select.cs.cmu.edu/code/graphlab/" target="_blank" rel="external">http://www.select.cs.cmu.edu/code/graphlab/</a></li>
<li>项目语言:     Java/Python</li>
<li>项目简介:<ul>
<li>GraphLab是一个流行的图谱分析（Graph Analysis）和机器学习的开源项目，2013年该项目剥离出一个独立运作的商业公司GraphLab Inc<br>HDFS。GraphLab 内置对HDFS 的支持，GraphLab 能够直接从HDFS中读数据或将计算结果数据直接写入到HDFS 中。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Deeplearning4j"><em>Deeplearning4j</em></h1><ul>
<li>项目文档:    <a href="http://deeplearning4j.org/" target="_blank" rel="external">http://deeplearning4j.org/</a></li>
<li>项目地址:    <a href="http://deeplearning4j.org/" target="_blank" rel="external">https://github.com/deeplearning4j/deeplearning4j</a></li>
<li>项目语言:    Java/Scala</li>
<li>项目简介:<ul>
<li>Deeplearning4j is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. Integrated with Hadoop and Spark, DL4J is designed to be used in business environments, rather than as a research tool.<br>Versatile n-dimensional array class<br>GPU integration<br>Scalable on Hadoop, Spark and Akka + AWS et al</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Caffe"><em>Caffe</em></h1><ul>
<li>项目主页:    <a href="http://caffe.berkeleyvision.org/" target="_blank" rel="external">http://caffe.berkeleyvision.org/</a></li>
<li>项目地址:    <a href="https://github.com/BVLC/caffe" target="_blank" rel="external">https://github.com/BVLC/caffe</a></li>
<li>项目简介:<ul>
<li>The Caffe framework from UC Berkeley is designed to let researchers create and explore CNNs and other Deep Neural Networks (DNNs) easily, while delivering high speed needed for both experiments and industrial deployment [5]. Caffe provides state-of-the-art modeling for advancing and deploying deep learning in research and industry with support for a wide variety of architectures and efficient implementations of prediction and learning.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Theano"><em>Theano</em></h1><ul>
<li>项目主页:    <a href="http://deeplearning.net/software/theano/" target="_blank" rel="external">http://deeplearning.net/software/theano/</a></li>
<li>项目地址:    <a href="https://github.com/Theano/Theano" target="_blank" rel="external">https://github.com/Theano/Theano</a></li>
</ul>
<hr>
<h1 id="Pylearn2"><em>Pylearn2</em></h1><ul>
<li>文档地址:    <a href="http://deeplearning.net/software/pylearn2/" target="_blank" rel="external">http://deeplearning.net/software/pylearn2/</a></li>
<li>项目地址:    <a href="https://github.com/lisa-lab/pylearn2" target="_blank" rel="external">https://github.com/lisa-lab/pylearn2</a></li>
<li>项目简介:<ul>
<li>Pylearn2和Theano由同一个开发团队开发，Pylearn2是一个机器学习库，它把深度学习和人工智能研究许多常用的模型以及训练算法封装成一个单一的实验包，如随机梯度下降。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Apache_SystemML"><em>Apache SystemML</em></h1><ul>
<li>项目主页:    <a href="http://systemml.apache.org/" target="_blank" rel="external">http://systemml.apache.org/</a></li>
<li>项目地址:    <a href="https://github.com/apache/incubator-systemml" target="_blank" rel="external">https://github.com/apache/incubator-systemml</a></li>
<li>项目简介:<br><ul>
<li>SystemML provides declarative large-scale machine learning (ML) that aims at flexible specification of ML algorithms and automatic generation of hybrid runtime plans ranging from single node, in-memory computations, to distributed computations on Apache Hadoop and Apache Spark. ML algorithms are expressed in a R or Python syntax, that includes linear algebra primitives, statistical functions, and ML-specific constructs. This high-level language significantly increases the productivity of data scientists as it provides (1) full flexibility in expressing custom analytics, and (2) data independence from the underlying input formats and physical data representations. Automatic optimization according to data characteristics such as distribution on the disk file system, and sparsity as well as processing characteristics in the distributed environment like number of nodes, CPU, memory per node, ensures both efficiency and scalability.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Apache_Singa"><em>Apache Singa</em></h1><ul>
<li>项目主页:    <a href="https://singa.incubator.apache.org/" target="_blank" rel="external">https://singa.incubator.apache.org/</a></li>
<li>项目地址:    <a href="https://github.com/apache/incubator-singa" target="_blank" rel="external">https://github.com/apache/incubator-singa</a></li>
<li>项目简介:<ul>
<li>Written almost completely in C++, this one emerged as an Apache incubator project in March. The original work on Singa was done by six students and research fellows from the National University of Singapore and one professor at China’s Zhejiang University.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Brainstorm"><em>Brainstorm</em></h1><ul>
<li>项目主页:    <a href="https://brainstorm.readthedocs.org/en/latest/index.html" target="_blank" rel="external">https://brainstorm.readthedocs.org/en/latest/index.html</a></li>
<li>项目地址:     <a href="https://github.com/IDSIA/brainstorm" target="_blank" rel="external">https://github.com/IDSIA/brainstorm</a></li>
<li>项目简介:<ul>
<li>A promising new library from a small team of researchers at the Swiss artificial intelligence lab Istituto Dalle Molle di Studi sull’Intelligenza Artificiale (IDSIA), Brainstorm can handle what are being called Highway Networks involving very deep networks with hundreds of layers. Like Theano, it’s written in Python.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Chainer"><em>Chainer</em></h1><ul>
<li>项目主页:    <a href="http://chainer.org/" target="_blank" rel="external">http://chainer.org/</a></li>
<li>项目地址:     <a href="https://github.com/pfnet/chainer" target="_blank" rel="external">https://github.com/pfnet/chainer</a></li>
<li>项目简介:<ul>
<li>Preferred Networks, a startup based in Japan, announced the release of the Python-based framework in June. Chainer’s design is based on the principle “define by run” — that is, the network is determined on the fly rather than only at the beginning, according to the documentation for the framework.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="ConvNetJS"><em>ConvNetJS</em></h1><ul>
<li>项目主页:    <a href="http://cs.stanford.edu/people/karpathy/convnetjs/" target="_blank" rel="external">http://cs.stanford.edu/people/karpathy/convnetjs/</a></li>
<li>项目地址:     <a href="https://github.com/karpathy/convnetjs" target="_blank" rel="external">https://github.com/karpathy/convnetjs</a></li>
<li>项目简介:<ul>
<li>This tool from Stanford University Ph.D. student Andrej Karpathy allows you to train neural nets right inside of your browser, using good old JavaScript. Karpathy has a great tutorial for getting started with ConvNetJS, as well as nifty browser-based demos.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="h2o"><em>h2o</em></h1><ul>
<li>项目主页:     <a href="http://h2o.ai/" target="_blank" rel="external">http://h2o.ai/</a></li>
<li>项目地址:    <a href="https://github.com/h2oai/h2o-3/tree/master/h2o-algos/src/main/java/hex/deeplearning" target="_blank" rel="external">https://github.com/h2oai/h2o-3/tree/master/h2o-algos/src/main/java/hex/deeplearning</a></li>
<li>项目简介:<ul>
<li>This Java-based framework is part of a more general machine learning runtime from a startup that goes by the same name (although not long ago the startup went by a different name, 0xdata).</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Marvin"><em>Marvin</em></h1><ul>
<li>项目主页:     <a href="http://marvin.is/" target="_blank" rel="external">http://marvin.is/</a></li>
<li>项目地址:    <a href="https://github.com/PrincetonVision/marvin" target="_blank" rel="external">https://github.com/PrincetonVision/marvin</a></li>
<li>项目简介:<ul>
<li>Marvin is a GPU-only neural network framework made with simplicity, hackability, speed, memory consumption, and high dimensional data in mind.<br>This new entrant from Princeton University’s Vision Group is written in C++. The team offers a file for converting Caffe models into a format that works in Marvin.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="MatConvNet"><em>MatConvNet</em></h1><ul>
<li>项目主页:    <a href="http://www.vlfeat.org/matconvnet/" target="_blank" rel="external">http://www.vlfeat.org/matconvnet/</a></li>
<li>项目地址:    <a href="https://github.com/vlfeat/matconvnet" target="_blank" rel="external">https://github.com/vlfeat/matconvnet</a></li>
<li>项目简介:<ul>
<li>This is a MATLAB toolbox for implementing convolutional neural nets. It was first developed by professor Andrea Vedaldi and Ph.D. student Karel Lenc of the University of Oxford’s Robotics Research Group.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="MXNet"><em>MXNet</em></h1><ul>
<li>项目主页:     <a href="http://mxnet.readthedocs.org/en/latest/" target="_blank" rel="external">http://mxnet.readthedocs.org/en/latest/</a></li>
<li>项目地址:     <a href="https://github.com/dmlc/mxnet" target="_blank" rel="external">https://github.com/dmlc/mxnet</a></li>
<li>项目简介:<ul>
<li>Primarily written in C++, MXNet was created by the people behind the CXXNet, Minerva, and Purine2 projects. It’s meant to use memory efficiently, and can even run on a smartphone, for tasks like image recognition.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Neon"><em>Neon</em></h1><ul>
<li>项目主页:    <a href="http://neon.nervanasys.com/docs/latest/index.html" target="_blank" rel="external">http://neon.nervanasys.com/docs/latest/index.html</a></li>
<li>项目地址:    <a href="http://venturebeat.com/2015/11/14/deep-learning-frameworks/" target="_blank" rel="external">http://venturebeat.com/2015/11/14/deep-learning-frameworks/</a></li>
<li>项目简介:<ul>
<li>Startup Nervana Systems published its Neon software under an open source back in May. Some benchmarks suggest that Neon — which is written mostly in Python and Sass — could outperform Caffe, Torch, and Google’s TensorFlow.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Veles"><em>Veles</em></h1><ul>
<li>项目主页:    <a href="https://velesnet.ml/" target="_blank" rel="external">https://velesnet.ml/</a></li>
<li>项目地址:    <a href="https://github.com/samsung/veles" target="_blank" rel="external">https://github.com/samsung/veles</a></li>
<li>项目简介:<ul>
<li>Named after the Slavic god by the same name, Veles comes from Samsung. It’s written mostly in Python, and it can be run in an IPython notebook.</li>
</ul>
</li>
</ul>
<hr>
<h1 id="参考链接"><em>参考链接</em></h1><ul>
<li>揭秘TensorFlow：<br><a href="http://news.zol.com.cn/551/5513527.html" target="_blank" rel="external">http://news.zol.com.cn/551/5513527.html</a></li>
<li>2015深度学习回顾：ConvNet、Caffe、Torch及其他<br><a href="http://www.chinacloud.cn/show.aspx?id=21212&amp;cid=17" target="_blank" rel="external">http://www.chinacloud.cn/show.aspx?id=21212&amp;cid=17</a></li>
<li>GraphLab Create使深度学习更easy<br><a href="http://planckscale.info/?p=226" target="_blank" rel="external">http://planckscale.info/?p=226</a></li>
<li>GraphLab:新的面向机器学习的并行框架<br><a href="http://planckscale.info/?p=226" target="_blank" rel="external">https://blog.inf.ed.ac.uk/graphprocs/2014/11/25/graphlab</a></li>
<li>DL4J vs. Torch vs. Theano vs. Caffe<br><a href="http://deeplearning4j.org/compare-dl4j-torch7-pylearn.html" target="_blank" rel="external">http://deeplearning4j.org/compare-dl4j-torch7-pylearn.html</a></li>
<li>KDnuggets热门深度学习工具排行：Pylearn2 居首，Caffe第三<br><a href="http://www.csdn.net/article/1970-01-01/2825166" target="_blank" rel="external">http://www.csdn.net/article/1970-01-01/2825166</a></li>
<li>Want an open-source deep learning framework? Take your pick<br><a href="http://venturebeat.com/2015/11/14/deep-learning-frameworks/" target="_blank" rel="external">http://venturebeat.com/2015/11/14/deep-learning-frameworks/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;DMTK&quot;&gt;&lt;em&gt;DMTK&lt;/em&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;项目地址: &lt;a href=&quot;https://github.com/Microsoft/DMTK&quot;&gt;https://github.com/Microsoft/DMTK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文档地址: &lt;a href=&quot;[http://www.dmtk.io/document.html&quot;&gt;http://www.dmtk.io/document.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;项目语言: CPP&lt;/li&gt;
&lt;li&gt;项目简介:&lt;br&gt;&lt;ul&gt;
&lt;li&gt;DMTK分布式机器学习框架：&lt;br&gt;它由参数服务器和客户端软件开发包（SDK）两部分构成。参数服务器在原有基础上从性能和功能上都得到了进一步提升——支持存储混合数据结构模型、 接受并聚合工作节点服务器的数据模型更新、控制模型同步逻辑等。客户端软件开发包（SDK）支持维护节点模型缓存（与全局模型服务器同步）、节点模型训练 和模型通讯的流水线控制、以及片状调度大模型训练等。
    
    </summary>
    
    
      <category term="Computer Science" scheme="http://yoursite.com/tags/Computer-Science/"/>
    
  </entry>
  
</feed>
